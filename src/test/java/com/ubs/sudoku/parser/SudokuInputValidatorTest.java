package com.ubs.sudoku.parser;

import com.ubs.sudoku.exception.InvalidInputException;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertAll;
import static org.junit.jupiter.api.Assertions.assertThrows;

class SudokuInputValidatorTest {

  @Test
  void matrixIsCorrectlyValidatedWithNoExceptionWhenDefault() {
    String[][] matrix = new String[][]{
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"}
    };

    SudokuInputValidator sudokuInputValidator = new SudokuInputValidator(matrix);

    assertAll(sudokuInputValidator::validateMatrix);
  }

  @Test
  void matrix16x16IsCorrectlyValidatedWithNoExceptionWhenDefault() {
    String[][] matrix = new String[][]{
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"},
            {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"}};

            SudokuInputValidator sudokuInputValidator = new SudokuInputValidator(matrix);

            assertAll(sudokuInputValidator::validateMatrix);
    }

    @Test
    void matrix25x25IsCorrectlyValidatedWithNoExceptionWhenDefault() {
      String[][] matrix = new String[][]{
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},
              {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25"},};


      SudokuInputValidator sudokuInputValidator = new SudokuInputValidator(matrix);

      assertAll(sudokuInputValidator::validateMatrix);
  }

  @Test
  void throwsInvalidInputWhenColsAndRowsDifferentLengthAndLengthNotASquare() {

    String[][] matrix = new String[][]{
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"}
    };

    SudokuInputValidator sudokuInputValidator = new SudokuInputValidator(matrix);

    assertThrows(
            InvalidInputException.class,
            sudokuInputValidator::validateMatrix);
  }

  @Test
  void throwsInvalidInputWhenMatrixLengthSmallerThanMinSudokuSize() {

    String[][] matrix = new String[][]{
            {"1","2","3","4","5"},
            {"1","2","3","4","5"},
            {"1","2","3","4","5"},
            {"1","2","3","4","5"},
            {"1","2","3","4","5"}
    };

    SudokuInputValidator sudokuInputValidator = new SudokuInputValidator(matrix);

    assertThrows(
            InvalidInputException.class,
            sudokuInputValidator::validateMatrix);
  }

  @Test
  void throwsInvalidInputWhenColsAndRowsSameLengthButLengthNotASquare() {

    String[][] matrix = new String[][]{
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"},
            {"1","2","3","4","5","6","7","8","9","10"}
    };

    SudokuInputValidator sudokuInputValidator = new SudokuInputValidator(matrix);

    assertThrows(
            InvalidInputException.class,
            sudokuInputValidator::validateMatrix);
  }

  @Test
  void throwsInvalidInputWhenMatrixHasInvalidChars() {

    String[][] matrix = new String[][]{
            {"%","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"},
            {"1","2","3","4","5","6","7","8","9"}
    };

    SudokuInputValidator sudokuInputValidator = new SudokuInputValidator(matrix);

    assertThrows(
            InvalidInputException.class,
            sudokuInputValidator::validateMatrix);
  }

  @Test
  void emptyAndSpacesValues9x9MatrixValidated() {
    String[][] matrix = new String[][]{
            {"","","","","","   ","","",""},
            {"  ","","","","","",""," ",""},
            {"","","","   ","","","","",""},
            {"","","","","   ","","","",""},
            {"","","","",""," ","","","  "},
            {"","","   ","","","","","",""},
            {""," ","","","","","","  ",""},
            {"","","","","","","","","   "},
            {"","","","",""," "," "," ",""}
    };

    SudokuInputValidator sudokuInputValidator = new SudokuInputValidator(matrix);

    assertAll(sudokuInputValidator::validateMatrix);
  }

  @Test
  void throwsInvalidInputWhenMatrixHasNotValideSpecialAndNumbersChars() {
    String[][] matrix = new String[][]{
            {"","","","","","","","",""},
            {"","","","","16","","","",""},
            {"","","%","","","","","",""},
            {"","","","","","","","",""},
            {"","","","","","","","",""},
            {"","","","","","","","",""},
            {"","","","","","","","",""},
            {"","","","","","","","",""},
            {"","","","","","","","",""}
    };

    SudokuInputValidator sudokuInputValidator = new SudokuInputValidator(matrix);

    assertThrows(
            InvalidInputException.class,
            sudokuInputValidator::validateMatrix);
  }
}